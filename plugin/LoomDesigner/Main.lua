--!strict
-- LoomDesigner plugin. Manages a tiny state object representing the designer
-- selections and can export configs to a Lua file.

local ReplicatedStorage
local GrowthVisualizer
local LoomConfigs
if rawget(_G, "game") and game.GetService then
        ReplicatedStorage = game:GetService("ReplicatedStorage")
        GrowthVisualizer = require(ReplicatedStorage.growth.GrowthVisualizer)
        LoomConfigs = require(ReplicatedStorage.looms.LoomConfigs)
else
        ReplicatedStorage = {}
        GrowthVisualizer = require("growth/GrowthVisualizer")
        LoomConfigs = require("looms/LoomConfigs")
end

local VisualScene
local ModelResolver
local SegmentBuilder
if script and script.Parent then
        VisualScene = require(script.Parent.VisualScene)
        ModelResolver = require(script.Parent.ModelResolver)
        SegmentBuilder = require(script.Parent.SegmentBuilder)
else
        VisualScene = require("LoomDesigner/VisualScene")
        ModelResolver = require("LoomDesigner/ModelResolver")
        SegmentBuilder = require("LoomDesigner/SegmentBuilder")
end

local LoomDesigner = {}

-- current working state used by the designer
local state = {
        configId = "oak_branch", -- default config, replace with one from LoomConfigs
        baseSeed = 12345,
        g = 50, -- growth percent
        overrides = {
                materialization = { mode = "Model" },
                rotationRules = {},
        },
}

function LoomDesigner.Start(plugin)
	print("LoomDesigner plugin started", plugin)
	return state
end

function LoomDesigner.SetConfigId(id)
	state.configId = id
end

function LoomDesigner.SetSeed(seed)
	state.baseSeed = seed
end

function LoomDesigner.RandomizeSeed()
	local rng = Random.new(os.clock())
	state.baseSeed = rng:NextInteger(1, 2^31 - 1)
	return state.baseSeed
end

function LoomDesigner.SetGrowthPercent(g)
	state.g = g
end

local function deepMerge(dst, src)
        for k, v in pairs(src) do
                if type(v) == "table" then
                        local sub = dst[k]
                        if type(sub) ~= "table" then
                                sub = {}
                                dst[k] = sub
                        end
                        deepMerge(sub, v)
                else
                        dst[k] = v
                end
        end
end

function LoomDesigner.SetOverrides(overrides)
        deepMerge(state.overrides, overrides)
end

function LoomDesigner.RebuildPreview(_container)
        if not state.configId then return end

        GrowthVisualizer.Render(nil, {
                loomUid = 0,
                configId = state.configId,
                baseSeed = state.baseSeed,
                g = state.g,
                overrides = state.overrides,
                scene = {
                        Clear = VisualScene.Clear,
                        Spawn = VisualScene.Spawn,
                        ResolveModel = ModelResolver.ResolveFromList,
                },
        })
end

-- Simple validation that checks for expected field types. Returns true if the
-- config appears valid otherwise false and the problematic field name.
function LoomDesigner.ValidateConfig(config)
	if type(config) ~= "table" then
		return false, "config"
	end
	if type(config.id) ~= "string" then
		return false, "id"
	end
	if config.growthDefaults and type(config.growthDefaults.segmentCount) ~= "number" then
		return false, "segmentCount"
	end
	return true
end

local function serialize(value, indent)
	indent = indent or 0
	local t = type(value)
	if t == "table" then
		local pieces = {"{"}
		local nextIndent = indent + 4
		for k, v in pairs(value) do
			local key
			if type(k) == "string" and k:match("^%a[%w_]*$") then
				key = k .. " = "
			else
				key = "[" .. serialize(k) .. "] = "
			end
			table.insert(pieces, string.rep(" ", nextIndent) .. key .. serialize(v, nextIndent) .. ",")
		end
		table.insert(pieces, string.rep(" ", indent) .. "}")
		return table.concat(pieces, "\n")
	elseif t == "string" then
		return string.format("%q", value)
	else
		return tostring(value)
	end
end

-- Export the provided config to disk. The default destination matches the
-- runtime path but tests may provide their own path to avoid mutating the repo.
function LoomDesigner.ExportConfig(config, destPath)
	local ok, err = LoomDesigner.ValidateConfig(config)
	if not ok then return false, err end
	destPath = destPath or "src/shared/looms/LoomConfigs.luau"

	local existing = {}
	local success, loaded = pcall(dofile, destPath)
	if success and type(loaded) == "table" then
		for k, v in pairs(loaded) do
			existing[k] = v
		end
	end
	existing[config.id] = config

	local file = assert(io.open(destPath, "w"))
	file:write("--!strict\n")
	file:write("-- Generated by LoomDesigner.ExportConfig\n\n")
	file:write("local configs = {\n")
	for k, v in pairs(existing) do
		file:write("    [" .. serialize(k) .. "] = " .. serialize(v, 4) .. ",\n")
	end
	file:write("}\n\nreturn configs\n")
	file:close()
	return true
end

return LoomDesigner
