-- BridgeModelDiagnostic.server.luau
-- Diagnoses bridge model issues and provides import instructions

local ReplicatedStorage = game:GetService("ReplicatedStorage")

print("\n" .. "="*60)
print("üîß BRIDGE MODEL DIAGNOSTIC")
print("="*60)

-- Check directory structure
local function checkPath(path, name)
    local result = ReplicatedStorage
    local pathParts = string.split(path, ".")
    
    for i, part in ipairs(pathParts) do
        result = result:FindFirstChild(part)
        if not result then
            print(string.format("‚ùå Missing: %s (stopped at step %d)", name, i))
            print(string.format("   Expected path: ReplicatedStorage.%s", path))
            return false, nil
        end
    end
    print(string.format("‚úÖ Found: %s", name))
    return true, result
end

-- Check each level of the required path
print("\nüìÅ CHECKING DIRECTORY STRUCTURE:")
local hasShared, shared = checkPath("Shared", "Shared folder")
local hasCatalog, catalog = checkPath("Shared.Catalog", "Catalog folder") 
local hasModels, models = checkPath("Shared.Catalog.Models", "Models folder")

-- Check for the specific bridge model
print("\nüåâ CHECKING BRIDGE MODEL:")
if hasModels then
    local bridgeModel = models:FindFirstChild("bridge_pone_1")
    if bridgeModel then
        print("‚úÖ Found: bridge_pone_1 model")
        print(string.format("   Type: %s", bridgeModel.ClassName))
        
        if bridgeModel:IsA("Model") then
            print(string.format("   Children count: %d", #bridgeModel:GetChildren()))
            for _, child in ipairs(bridgeModel:GetChildren()) do
                print(string.format("     - %s (%s)", child.Name, child.ClassName))
            end
            
            -- Check for primary part
            if bridgeModel.PrimaryPart then
                print(string.format("   Primary part: %s", bridgeModel.PrimaryPart.Name))
            else
                print("   ‚ö†Ô∏è  No PrimaryPart set (this is okay, we'll find a part automatically)")
            end
        elseif bridgeModel:IsA("BasePart") then
            print("   Type: Single part/mesh")
            if bridgeModel:IsA("MeshPart") then
                print(string.format("   MeshId: %s", bridgeModel.MeshId))
                print(string.format("   Size: %s", tostring(bridgeModel.Size)))
            end
        end
    else
        print("‚ùå Missing: bridge_pone_1 model")
        print("\nüìã AVAILABLE MODELS IN FOLDER:")
        if #models:GetChildren() == 0 then
            print("   (No models found)")
        else
            for _, child in ipairs(models:GetChildren()) do
                print(string.format("   - %s (%s)", child.Name, child.ClassName))
            end
        end
    end
else
    print("‚ùå Cannot check bridge model - Models folder missing")
end

-- Provide instructions
print("\nüìñ INSTRUCTIONS TO FIX:")
print("="*40)

if not hasShared then
    print("1. Create folder 'Shared' in ReplicatedStorage")
end

if not hasCatalog then
    print("2. Create folder 'Catalog' in ReplicatedStorage.Shared")
end

if not hasModels then
    print("3. Create folder 'Models' in ReplicatedStorage.Shared.Catalog")
end

if hasModels then
    local bridgeModel = models:FindFirstChild("bridge_pone_1")
    if not bridgeModel then
        print("4. Import the bridge model:")
        print("   a. Right-click on ReplicatedStorage.Shared.Catalog.Models")
        print("   b. Choose 'Insert from File...'")
        print("   c. Navigate to: src/replicated/Shared/Catalog/Models/bridge_pone_1.rbxm")
        print("   d. Import the file")
        print("   e. Ensure the imported model is named exactly 'bridge_pone_1'")
    end
end

print("\nüéØ CURRENT BRIDGE CONFIG:")
print("="*30)

-- Check current bridge configuration
local UpdatedBridgeConfig = require(script.Parent:FindFirstChild("src") and 
    script.Parent.src.server.Worldgen:FindFirstChild("UpdatedBridgeConfig"))

if UpdatedBridgeConfig then
    local configs = UpdatedBridgeConfig.GetConfigs()
    for i, config in ipairs(configs) do
        print(string.format("Bridge %d: %s (weight: %d%%)", i, config.name, config.weight))
        if config.useCatalogModel then
            print(string.format("  Looking for model: %s", config.meshId))
        else
            print("  Using fallback part")
        end
    end
end

print("\nüîÑ TESTING BRIDGE SETUP:")
if hasModels and models:FindFirstChild("bridge_pone_1") then
    local setupOk = pcall(function()
        UpdatedBridgeConfig.CheckSetup()
    end)
    if setupOk then
        print("‚úÖ Bridge setup validation passed")
    else
        print("‚ùå Bridge setup validation failed")
    end
else
    print("‚è≠Ô∏è  Skipping setup test - model not imported yet")
end

print("\n" .. "="*60)
print("üèÅ DIAGNOSTIC COMPLETE")
print("="*60)

-- Self-destruct after 30 seconds to avoid clutter
wait(30)
script:Destroy()
